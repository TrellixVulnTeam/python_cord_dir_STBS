# リストの使い方

# 変域設定

seat =[]
min =0
max =5

# 判定文
min <= len(seat) <= max

# 実行結果はtrue
# これに

# 追加
seat.append('mamushi')
# 削除
seat.pop()

# 判定文
min <= len(seat) <= max



# タプル→読み込み専用
# タプルは新しい値を代入できないようにする
t =(1,2,3)

# ただし以下のような参照操作はできる
t.index(1)
t[0:1]
t.count(1)


# ただしタプルの中に配列を定義した場合は操作が可能
t=([1,2,4],[2,1,4])

# 0行0列目に数値書き換え
t[0][0]=100

# タプルの場合
# 1つしか入ってない場合にもタプルと認識される
# バグの原因になるので気おつけなければいけない

t =1,
type(t)

# 注意としてカンマを入れないとタプルとして認識しなくなる
t=(1)
t=('mamushi')


# 新しいタプルの生成
new_tuple =(1,2,3)+(4,5,6)
# 実行結果
# (1, 2, 3, 4, 5, 6)

# 注意としてカンマは絶対に必要
new_tuple2 =(1,)+(4,5,6)



# タプルのアンパッキング

num_tuple =(10,20)
x,y =num_tuple

# 実行結果は、数字が展開される
# xに10、yに20が代入される

# 以下のように書いても同様
x,y=10,20


# 入れ替えしたい場合

# 通常書く場合
# 3行かかってしまう

i=10
j=20
# 仮変数定義
tmp =i
i=j
j=tmp

# タプルを使った場合
# 1行で書き換えられる
a=100
b=200
a,b =b,a

# タプルの実用例
# 問題を与えるとき

# 選択肢定義
chose_from_two=('A','B','C')

# 回答定義
answer=[]
answer.append('A')
answer.append('B')

print(chose_from_two)