#全部で構造はlist、dict、setが存在する

# リストの操作方法について記述

list =['a','b','c','d']

#全体を指す
list[:]

#リストの中を空にできる
list[:]=[]

# リストの追加をしたい時
# 最後に追加
list.append('入れたい物')

# 最初に追加
# 0はリストの0番目に挿入するということ
# 番号で指定できる
list.insert(0,200)

# データを取り出したい
# 取り出されたものはリストから消える
# 番号で何番目を取り出すか指定できる

# 最後を取り出し
list.pop()

# 0番目(最初)を取り出し
list.pop(0)

# 指定した配列を取り出す
list.remove(1)


# リストの結合
list1 =['a','b','c','d']
list2 =['a','b','c','d']

list3 = list1 +list2
# 実行結果
# ['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd']

# list1にlist2を付け加えたい時
# list1にlist2が付け加えられる
list1 += list2

# extendでもできる
list1.extend(list2)

# リストの参照
list4 =[1,2,4,5,3,4]

#1が入ってる配列の番号を教えてくれる
list4.index(1)

#n個目の配列から探して欲しい場合、第二引数にnを指定する
list4.index(2,2)

# 配列の中身をカウントしたい時
list4.count(4)

# 実行結果→2

# 特定の数字があった場合に実行させるにkは
if 5 in list4:
    print('存在しているよ')

# 昇べきの順に並べ替えて欲しい時
list4.sort()

# 逆にソートして欲しい時、次のうちのどちらかでできる
list4.sort(reverse=True)
list4.reverse()

# 配列を分割して入れた時(スプリット)

s='hello mamushi!!'
to_split =s.split(' ')

# ↓[実行結果]　空白のように入れてくれる
# ['hello', 'mamushi!!']

# これを元に戻したい時(ジョインさせたい時)
# リストにあるデータ(to_split)を空白文字を使用して繋げる命令
s =' '.join(to_split)

# ヘルプでメソッドを全部表示させてくれる
help(list)

# リストのコピー

# 値・参照わたし
# list6に操作した場合、大元のlist5にも影響が出るということ

list5 =[1,2,3,4,5]
list6=list5

list6[0]=100

# これを避けたい場合、以下の2パターンを使用する
list7 = list5.copy()
list7 = list5[:]

# 以下の操作をしても、影響はでない
list7[100]=100


# 値と参照渡しは違う
# 参照前が数字は書き換えられないで、配列は書き換えられてしまう

# 数値の場合
X=20
Y=X
Y=5

# 実行結果
# X=5  Y=20

# 配列の場合
# list6に操作した場合、大元のlist5にも影響が出るということ

list5 =[1,2,3,4,5]
list6=list5

list6[0]=100

# 実行結果
# list5=[100, 2, 3, 4, 5]
# list6=[100, 2, 3, 4, 5]




